// 1、单例模式的定义是：保证一个类仅有一个实例，并提供一个访问它的全局访问点。

// 2、策略模式的定义是：定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。
// 优点
// a 策略模式利用组合、委托和多态等技术和思想，可以有效地避免多重条件选择语句。
// b 策略模式提供了对开放—封闭原则的完美支持，将算法封装在独立的 strategy 中，使得它们易于切换，易于理解，易于扩展。
// c 策略模式中的算法也可以复用在系统的其他地方，从而避免许多重复的复制粘贴工作。
// d 在策略模式中利用组合和委托来让 Context 拥有执行算法的能力，这也是继承的一种更轻便的替代方案。

// 3、代理模式是为一个对象提供一个代用品或占位符，以便控制对它的访问。
// 保护代理和虚拟代理
// 缓存代理
var proxyMult = (function () {
  var cache = {};
  return function () {
    var args = Array.prototype.join.call(arguments, ",");
    if (args in cache) {
      return cache[args];
    }
    return (cache[args] = mult.apply(this, arguments));
  };
})();
proxyMult( 1, 2, 3, 4 ); // 输出：24 
proxyMult( 1, 2, 3, 4 ); // 输出：24

// 4、迭代器模式
// 迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象
// 的内部表示。迭代器模式可以把迭代的过程从业务逻辑中分离出来，在使用迭代器模式之后，即
// 使不关心对象的内部构造，也可以按顺序访问其中的每个元素。

// 5、发布—订阅模式
// 发布—订阅模式又叫观察者模式，它定义对象间的一种一对多的依赖关系，当一个对象的状
// 态发生改变时，所有依赖于它的对象都将得到通知。在 JavaScript 开发中，我们一般用事件模型
// 来替代传统的发布—订阅模式。

// 6、命令模式
// 命令模式是最简单和优雅的模式之一，命令模式中的命令（command）指的是一个执行某些特定事情的指令。

// 7、组合模式
// 组合模式将对象组合成树形结构，以表示“部分整体”的层次结构。

// 8、模板方法模式
// 模板方法模式是一种只需使用继承就可以实现的非常简单的模式。
// 模板方法模式由两部分结构组成，第一部分是抽象父类，第二部分是具体的实现子类。通常
// 在抽象父类中封装了子类的算法框架，包括实现一些公共方法以及封装子类中所有方法的执行顺
// 序。子类通过继承这个抽象类，也继承了整个算法结构，并且可以选择重写父类的方法。

// 好莱坞原则

// 9、享元模式
// 享元（flyweight）模式是一种用于性能优化的模式，“fly”在这里是苍蝇的意思，意为蝇量
// 级。享元模式的核心是运用共享技术来有效支持大量细粒度的对象。


// 10、职责链模式
// 职责链模式的定义是：使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间
// 的耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。